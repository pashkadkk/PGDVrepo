package dk.aau.oose;


import org.newdawn.slick.SlickException;


import dk.aau.oose.core.GameElement;
import dk.aau.oose.core.GameWorld;



public class Maze {
	

	
	public int [][] MAZE = {
				/*	A basic map from an "MAZE" array is defined"
				 */
			/*0*/	{2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2},
			/*1*/	{2,2,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,2,2,2,2},
			/*2*/	{2,2,2,2,2,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,2,2,2,2,2},
			/*3*/	{2,2,2,2,2,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*4*/	{2,2,2,2,2,1,0,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,2,2,2,2,2},
			/*5*/	{2,2,2,2,2,1,0,1,0,1,1,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*6*/	{2,2,2,2,2,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,2,2,2,2,2},
			/*7*/	{2,2,2,2,2,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*8*/	{2,2,2,2,2,1,0,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*9*/	{2,2,2,2,2,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*10*/	{2,2,2,2,2,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,2,2,2,2,2},
			/*11*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*12*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*13*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*14*/	{2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2},
			/*15*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*16*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*17*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*18*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*19*/	{2,2,2,2,2,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,2,2,2,2,2},
			/*20*/	{2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2},
			/*21*/	{2,2,2,2,2,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,0,1,2,2,2,2,2},
			/*22*/	{2,2,2,2,2,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,1,2,2,2,2,2},
			/*23*/	{2,2,2,2,2,1,0,1,0,1,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,1,0,1,0,1,2,2,2,2,2},
			/*24*/	{2,2,2,2,2,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,2,2,2,2,2},
			/*25*/	{2,2,2,2,2,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,2,2,2,2,2},
			/*26*/	{2,2,2,2,2,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,2,2,2,2,2},
			/*27*/	{2,2,2,2,2,1,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,2,2,2,2,2},
			/*28*/  {2,2,2,2,2,1,0,1,0,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,2,2,2,2,2},
			/*29*/  {2,2,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,7,7,1,2,2,2,2,2},
			/*30*/  {2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2}		
			
	};
	
	public void buildMaze() throws SlickException {
		// a function for reading a "MAZE" array(a.k.a. map) and creating objects based on the numbers gathered from array
		for (int i=0;i<=600;i+=20)
			for (int j=0; j<=800; j+=20)		
				{
				  switch (MAZE[i/20][j/20]){
				  case 0: SmallObjects sun= null;
					try {
						sun = new Sun(j,i);
					} catch (SlickException e) {
						e.printStackTrace();
					}
					 GameWorld.add(sun);
					 // if number in array is '0' - a sun is created
					 break;
				  case 1:
					  Wall wall=new Wall(j,i);
					  GameWorld.add(wall);
					  // if number in array is '1' - a wall is created
					  break;
				  case 2:
					  Grass grass=new Grass(j,i);
					  GameWorld.add(grass);
					  // if number in array is '2' - a grass i created
					  break;
				  case 3:
					  SmallObjects cherry= null;
						try {
							cherry = new Cherry(j,i);
						} catch (SlickException e) {
							e.printStackTrace();
						}
						 GameWorld.add(cherry);
						 // if number in array is '3' - a cherry is created
					  break;
				  default: 
		
					  break;
			  
					  
				  }
				 
				 }
		  SuperZombie zombie=new SuperZombie();
		  zombie.position.x=400;
		  zombie.position.y=220;
		  GameWorld.add(zombie);
		  // creates a superzombie and defines it's location
		 for (int x=0;x<5;x++)
		  {
			  Zombie zombie1=new Zombie();
				 zombie1.position.x=400;
				 zombie1.position.y=240;
				 GameWorld.add(zombie1);
				 // created 5 zombies and defines their location
		  }	
	}
		


	
	public void updateMaze(){
		// creates a maze
		for (GameElement g: GameWorld.getGameObjects())
				if (!(g instanceof Plant))
				g.destroy();
				
		
	}
	
}
